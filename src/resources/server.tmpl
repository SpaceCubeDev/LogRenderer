<!DOCTYPE html>
<html lang="en">
<head>
    <title>LogRenderer - {{ .ServerDisplayName }}</title>

    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="icon" href="{{ .UrlPrefix }}/res/favicon-png" type="image/png" sizes="any">

    <link rel="stylesheet" href="{{ .UrlPrefix }}/res/global-css">
    <link rel="stylesheet" href="{{ .UrlPrefix }}/res/server-css">
    {{- if .AreArchivedLogsAvailable -}}
        <link rel="stylesheet" href="{{ .UrlPrefix }}/res/archive-css">
    {{ end }}

    <meta name="theme-color" content="#fafafa">
</head>
<body>
<div class="flex-box">
    {{ template "navbar" . -}}
    {{ $urlPrefix := .UrlPrefix }}
    <main>
        {{- if .AreArchivedLogsAvailable -}}
            {{- template "archive-loader" . -}}
        {{- end }}
        <div id="logs" class="logs">
            {{- range $logLine := .ServerLogs }}
                <div class="row">{{ $logLine }}</div>
            {{- end -}}
        </div>
    </main>
</div>
<script>
    const searchInput = document.getElementById("search-input");
    const lastUpdateSpan = document.getElementById("last-update");
    {{- if .AreArchivedLogsAvailable -}}
    const archiveLoaderBackground = document.getElementById("archive-loader-background");
    {{- end -}}
    const logsDiv = document.getElementById("logs");

    const inlineRegexps = {{ .SyntaxHighlightingRegexps }}.reverse();

    const twoDigits = d => d < 10 ? "0" + d : d;

    function handleLineFocus(target) {
        for (let i = 0; !target.classList.contains("row") && i < 10; i++) {
            target = target.parentElement;
        }
        const line = target;
        searchInput.value = "";
        handleSearch();
        line.classList.add("highlighted");
        line.scrollIntoView();
        setTimeout((row) => row.classList.remove("highlighted"), 2000, line);
    }

    function parseLine(line) {
        if (line.innerText.length === 0) {
            return line;
        }
        let lineText = line.textContent;
        for (const highlighter of inlineRegexps) {
            const field = highlighter.field;
            const regexp = new RegExp(highlighter.regex, "m");
            try {
                if (!regexp.test(lineText)) {
                    continue;
                }
                lineText = lineText.replace(regexp, `<span class="${field}">` + "$&" + "</span>");
            } catch (error) {
                console.error(field, regexp, line, error);
            }
        }
        line.innerHTML = lineText;
        line.addEventListener("click", ev => searchInput.value !== "" ? handleLineFocus(ev.target) : null);
        return line;
    }

    function isLogDivFullyScrolled() {
        return window.scrollY + window.innerHeight - logsDiv.getBoundingClientRect().top - logsDiv.offsetParent.getBoundingClientRect().top === logsDiv.scrollHeight;
    }

    function scrollToEnd() {
        if (logsDiv.firstElementChild != null) {
            logsDiv.lastElementChild.scrollIntoView();
        }
    }

    {{ if .AreArchivedLogsAvailable -}}
    function toggleArchiveLoader() {
        if (archiveLoaderBackground.classList.contains("hidden")) {
            archiveLoaderBackground.classList.remove("hidden");
        } else {
            archiveLoaderBackground.classList.add("hidden");
        }
    }

    function submitArchive() {
        const selector = document.getElementById("archive-selector");
        if (selector != null) {
            const value = selector.value;
            if (value !== "") {
                window.location.replace("{{ .UrlPrefix }}/archive/{{ getCurrentServer }}/" + value);
            }
        } else {
            console.warn("No input found !");
        }
    }
    {{- end -}}

    function handleEvent(data) {
        let event;
        try {
            event = JSON.parse(data);
        } catch (e) {
            console.error(e);
            console.log("EventData:", data);
            return;
        }
        // console.info(event);
        switch (event["type"]) {
            case "ADD":
                if (event["content"] && event["content"].length > 0) {
                    const newLine = document.createElement("div");
                    newLine.classList.add("row")
                    newLine.innerText = event["content"];
                    const mustScroll = isLogDivFullyScrolled();
                    logsDiv.appendChild(parseLine(newLine));
                    if (mustScroll) {
                        scrollToEnd();
                    }
                }
                break;
            case "RESET":
                console.warn("Reset !");
                while (logsDiv.hasChildNodes()) {
                    logsDiv.removeChild(logsDiv.firstChild);
                }
                break;
            case "ERROR":
                console.error("Error:", event["message"]);
                updateWebsocketStatus(false);
                break;
            default:
                console.warn("Unknown event:", event["type"]);
                break;
        }

        const date = new Date();
        lastUpdateSpan.innerText = `${twoDigits(date.getHours())}:${twoDigits(date.getMinutes())}:${twoDigits(date.getSeconds())}`;
    }

    function handleSearch() {
        const value = searchInput.value.toLowerCase();
        if (value === "") {
            document.querySelectorAll("main .row.hidden").forEach(row => row.classList.remove("hidden"));
        } else {
            document.querySelectorAll("main .row").forEach(row => {
                if (row.textContent.toLowerCase().includes(value)) {
                    row.classList.remove("hidden");
                } else {
                    row.classList.add("hidden");
                }
            });
        }
    }

    function toggleDynamicDropdown(serverType) {
        const dropdown = document.querySelector(`nav ul.servers li .dynamic-dropdown[server-type=${serverType}]`);
        const dropdownContent = dropdown.querySelector(`.dynamic-dropdown-content`);
        if (dropdown.classList.contains("selected")) {
            dropdown.classList.remove("selected");
        } else {
            if (dropdownContent.childElementCount === 0) {
                // get server instances
                console.info("Fetching", serverType, "instances ...");
                fetch("{{ .UrlPrefix }}/dynamic/?only=" + serverType).then(response => {
                    if (response.status >= 500) {
                        console.error("Error while fetching instances of server " + serverType + ":", response.statusText);
                        return;
                    }
                    response.json().then(jsonResponse => {
                        if (response.status !== 200) {
                            console.warn("Unexepected response from server:", jsonResponse.message);
                            return;
                        }
                        const instances = jsonResponse.data;
                        for (const instance in instances) {
                            // create link to the instance
                            const a = document.createElement("a");
                            a.classList.add("dynamic-dropdown-content-link");
                            if (instance === {{ .Instance }}) {
                                a.classList.add("active");
                            }
                            a.href = "{{ .UrlPrefix }}/dynamic/" + serverType + "/" + instance;
                            a.innerText = instances[instance];
                            dropdownContent.appendChild(a);
                            // create separator
                            const hr = document.createElement("hr");
                            hr.classList.add("dynamic-dropdown-content-hr");
                            dropdownContent.appendChild(hr);
                        }
                    }).catch(reason => {
                        console.error("Failed to parse response to json:", reason);
                    });
                }).catch(reason => {
                    console.error("Failed to fetch instances of server " + serverType + ":", reason);
                });
            }
            dropdown.classList.add("selected");
        }
    }

    function updateWebsocketStatus(alive) {
        if (alive) {
            document.getElementById("websocket-status").classList.add("connected");
        } else {
            document.getElementById("websocket-status").classList.remove("connected");
        }
    }

    document.addEventListener("DOMContentLoaded", () => {
        searchInput.value = "";
        searchInput.addEventListener("input", handleSearch);
        searchInput.addEventListener("focusout", scrollToEnd);

        document.querySelectorAll("nav ul.servers li .dynamic-dropdown").forEach(dropdown => {
            const serverType = dropdown.getAttribute("server-type");
            const title = dropdown.querySelector("span.dynamic-dropdown-title");
            title.addEventListener("click", () => toggleDynamicDropdown(serverType));
        });

        {{ if .AreArchivedLogsAvailable -}}
        document.getElementById("archive-loader-trigger").addEventListener("click", toggleArchiveLoader);
        document.getElementById("archive-loader-background").addEventListener("click", toggleArchiveLoader);
        document.getElementById("archive-loader").addEventListener("click", ev => ev.stopPropagation());
        document.getElementById("submit-archive").addEventListener("click", submitArchive);
        {{- end -}}

        if (window["WebSocket"]) {
            const wsProtocol = location.protocol === "https:" ? "wss:" : "ws:";
            const urlPrefix = '{{ $urlPrefix }}';
            const conn = new WebSocket(wsProtocol + "/\/" + location.host + urlPrefix + "/ws");

            conn.onclose = () => {
                updateWebsocketStatus(false);
                console.warn("WebSocket connection closed");
            }

            conn.onmessage = ev => {
                // console.log("WebSocket message:", ev);
                for (const data of ev.data.split('{{ .MessageSeparator }}')) {
                    if (data.length !== 0) {
                        handleEvent(data);
                    }
                }
            }

            updateWebsocketStatus(!!conn);

            if (!conn) {
                console.error("No WebSocket connection established");
                return;
            }

            function register() {
                if (conn.readyState === 1) {
                    {{- if isDynamic }}
                    conn.send('{{ .Server }}=>{{ .Instance }}');
                    {{ else }}
                    conn.send('{{ .Server }}');
                    {{ end -}}
                    return;
                }
                setTimeout(register, 100);
            }

            register();
        } else {
            updateWebsocketStatus(false);
            console.error("Your browser does not support WebSockets");
        }

        logsDiv.querySelectorAll("#logs > div.row").forEach(line => parseLine(line));
        scrollToEnd();
    });
</script>
</body>
</html>