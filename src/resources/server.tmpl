<!DOCTYPE html>
<html lang="en">
<head>
    <title>LogRenderer - {{ .ServerDisplayName }}</title>

    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="icon" href="{{ .WebsiteFaviconUrl }}" type="any" sizes="any">

    <link rel="stylesheet" href="{{ .UrlPrefix }}/res/global-css">
    <link rel="stylesheet" href="{{ .UrlPrefix }}/res/server-css">
    {{- if .AreArchivedLogsAvailable -}}
        <link rel="stylesheet" href="{{ .UrlPrefix }}/res/archive-css">
    {{ end }}

    <meta name="theme-color" content="#fafafa">
</head>
<body>
<div class="flex-box">
    {{ template "navbar" . -}}
    {{ $urlPrefix := .UrlPrefix }}
    <main>
        <div id="logs" class="logs">
            {{- range $logLine := .ServerLogs }}
                <div class="row">{{ $logLine }}</div>
            {{- end -}}
        </div>
    </main>
    {{- if .AreArchivedLogsAvailable -}}
        {{- template "archive-loader" . -}}
    {{- end }}
</div>
{{ template "common-scripts" . -}}
<script>
    function updateWebsocketStatus(alive) {
        if (alive) {
            document.getElementById("websocket-status").classList.add("connected");
        } else {
            document.getElementById("websocket-status").classList.remove("connected");
        }
    }

    function addLine(content) {
        const mustScroll = isLogDivFullyScrolled();
        const newLine = document.createElement("div");
        newLine.classList.add("row")
        newLine.innerText = content;
        if (searchInput.value !== "" && !content.toLowerCase().includes(searchInput.value)) {
            newLine.classList.add("hidden");
        }
        logsDiv.appendChild(parseLine(newLine));
        if (mustScroll) {
            scrollToEnd();
        }
    }

    function handleEvent(data) {
        let event;
        try {
            event = JSON.parse(data);
        } catch (e) {
            console.error(e);
            console.log("EventData:", data);
            return;
        }
        // console.info(event);
        switch (event["type"]) {
            case "ADD":
                if (event["content"] && event["content"].length > 0) {
                    addLine(event["content"]);
                    if (logsDiv.querySelectorAll("div.row").length > maxLinesCountInput.value) {
                        logsDiv.removeChild(logsDiv.firstElementChild);
                    }
                }
                break;
            case "RESET":
                console.info("Reset !");
                while (logsDiv.hasChildNodes()) {
                    logsDiv.removeChild(logsDiv.firstChild);
                }
                break;
            case "ERROR":
                console.error("Error:", event["message"]);
                updateWebsocketStatus(false);
                break;
            default:
                console.warn("Unknown event:", event["type"]);
                break;
        }

        const date = new Date();
        lastUpdateSpan.innerText = `${twoDigits(date.getHours())}:${twoDigits(date.getMinutes())}:${twoDigits(date.getSeconds())}`;
    }

    document.addEventListener("DOMContentLoaded", () => {
        if (window["WebSocket"]) {
            const wsProtocol = location.protocol === "https:" ? "wss:" : "ws:";
            const urlPrefix = '{{ $urlPrefix }}';
            const conn = new WebSocket(wsProtocol + "/\/" + location.host + urlPrefix + "/ws");

            conn.onclose = () => {
                updateWebsocketStatus(false);
                console.warn("WebSocket connection closed");
            }

            conn.onmessage = ev => {
                // console.log("WebSocket message:", ev);
                for (const data of ev.data.split('{{ .MessageSeparator }}')) {
                    if (data.length !== 0) {
                        handleEvent(data);
                    }
                }
            }

            updateWebsocketStatus(!!conn);

            if (!conn) {
                console.error("No WebSocket connection established");
                return;
            }

            function register() {
                // Waiting for the connection to be ready
                if (conn.readyState === 1) {
                    {{- if isDynamic }}
                    conn.send('{{ .Server }}=>{{ .Instance }}');
                    {{ else }}
                    conn.send('{{ .Server }}');
                    {{ end -}}
                    return;
                }
                setTimeout(register, 100);
            }

            register();
        } else {
            updateWebsocketStatus(false);
            console.error("Your browser does not support WebSockets");
        }
    });
</script>
</body>
</html>